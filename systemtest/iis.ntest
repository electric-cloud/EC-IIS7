# -*-Perl-*-

###############################
# iis.ntest
#
# Exercise basic components of EC-IIS7 plugin
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved
###############################

use strict;
use warnings;
use ECTest;

initCommander();

$::gPlugin_name   = $::ENV{PLUGIN_NAME};
$::gPlugin_key    = $::gPlugin_name;
$::gPlugin_key    =~ s/-[^-]+$//;
$::gPlugin_driver = $::gPlugin_key;
$::gPlugin_driver =~ s/-/::/g;

   use constant {
       SUCCESS => 0,
       ERROR   => 1,
       WINDOWS_OS_ID => 'MSWin32'
   };

# win/lin matches the chronic3 procedure platform property
$::gPlatform       = 'lin';
if ($^O eq WINDOWS_OS_ID) {
    $::gPlatform = 'win';
}else{
    #this is a windows-only plugin, if not executed in Windows,
    #there is no need to test
    exit SUCCESS; 
}

# from initCommander
$::N = $adminSession;
my $xpath = $::N->getPlugin($::gPlugin_key);
$::gPlugin_name = $xpath->findvalue('//pluginName')->value;
$::gPlugin_ver = $xpath->findvalue('//pluginVersion')->value;
$::gCreatePrivateDirs = 1;

# triggers fake data
$::gRunTestUseFakeOutput = 1;

$::gProjectImported = 0;
$::gtestProjectName = 'IIS 7 Testing';

my $outcome = '';

########################################################################
# importProject - imports the test project and asserts that the specified
#                 procedures exists
#
# Arguments:
#   -none
#
# Returns:
#   -nothing
#
########################################################################
sub importProject() {
 
    #assert project exists and is imported
    assertOK($::N->import(
             { file =>"$::gTestFileDir/iis7SystemTests.xml",
               path  => "/projects/IIS 7 Testing",
               force => 1
             } ), 'import unsuccessful');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'assignAppToPool'),
      'assignAppToPool procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'createAndDeleteWebApp'),
      'createAndDeleteWebApp procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'createAppPool'),
       'createAppPool procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'createVirtualDir'),
       'createVirtualDir procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'createWebApp'),
       'createWebApp procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'deleteVirtualDir'),
       'deleteVirtualDir procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'listAllSites'),
       'listAllSites procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'listApps'),
       'listApps procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'listSitesByBinding'),
       'listSitesByBinding procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'listSitesUsingIncorrectCommand'),
       'listSitesUsingIncorrectCommand procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'start&stopDefaultSite'),
       'start&stopDefaultSite procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'start-Site1'),
       'start-Site1 procedure doesn\'t exist');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'startAppPool-FakePool'),
       'startAppPool-FakePool procedure doesn\'t exist');
       
        #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'startAppPool-NameWithSpaces'),
       'startAppPool-NameWithSpaces procedure doesn\'t exist');
       
        #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'startAppPool-Site1'),
       'startAppPool-Site1 procedure doesn\'t exist');
       
       #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'stop-Site1'),
       'stop-Site1 procedure doesn\'t exist');
       
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'stopAppPool-FakePool'),
       'stopAppPool-FakePool procedure doesn\'t exist');
       
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'stopAppPool-Site1'),
       'stopAppPool-Site1 procedure doesn\'t exist');
       
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'checkServerStatus'),
       'stopAppPool-Site1 procedure doesn\'t exist');
       
    $::gProjectImported = 1;
}

########################################################################
# doSetup - invokes the project import method in case it hasn't been 
#           executed
#
# Arguments:
#   -none
#
# Returns:
#   -nothing
#
########################################################################
sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }
    
}

################################
# check-components-present - Check that the plugin contains required components
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "check-components-present", {}, sub {
    
    my $xpath = $::N->getSteps("$::gPlugin_name","CreateConfiguration");
    assertOK($xpath,"CreateConfiguration");
    assertEq("CreateConfiguration", $xpath->findvalue("//step[1]/stepName"), "step 1 is CreateConfiguration");
    assertEq("CreateAndAttachCredential", $xpath->findvalue("//step[2]/stepName"), "step 2 is CreateAndAttachCredential");

};

################################
# setup-create configuration - Test creating a configuration
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "setup-create configuration", {}, sub {
    my $xpath = $::N->runProcedure("$::gPlugin_name", 
        { procedureName => "CreateConfiguration",
          pollInterval  => '0.2',
          timeout       => 600,
          actualParameter => [ 
            { actualParameterName => 'config', value => "config1" }, 
            { actualParameterName => 'iis_url', value => "127.0.0.1" },
            { actualParameterName => 'iis_port', value => "8081" },
            { actualParameterName => 'iis_computer', value => "Server1" },
            { actualParameterName => 'credential', value => "config1" }, 
          ],
          credential => [ 
            { credentialName => 'config1', userName => "admin", password => "admin", },
          ],
        });

    assertOK($xpath, 'run create configuration procedure');
    # make sure it finished
    my $jobId = 0;
    my $status = '';
    assertDef($xpath, 'runProcedure finished without a timeout');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && int($jobId) > 0,'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # examine log files
    $xpath = $::N->getJobDetails($jobId);

    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");

    # check that the config and credential exist
    $xpath = $::N->getProperty("/projects/$::gPlugin_name/iis_cfgs/config1/iis_url");
    assertEq('127.0.0.1', $xpath->findvalue("//value")->string_value,"server url");
    
    $xpath = $::N->getProperty("/projects/$::gPlugin_name/iis_cfgs/config1/iis_port");
    assertEq('8081', $xpath->findvalue("//value")->string_value,"port");
    
    $xpath = $::N->getProperty("/projects/$::gPlugin_name/iis_cfgs/config1/iis_computer");
    assertEq('Server1', $xpath->findvalue("//value")->string_value,"server name");
    
    $xpath = $::N->getCredential("$::gPlugin_name",'config1');
    assertEq('admin', $xpath->findvalue("//userName")->string_value, 'Credential user');
};

ntest "checkServerStatus", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "checkServerStatus",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      #my $commandLine = $xpath->findvalue("//property[propertyName='checkServerStatusLine']/value");

};


ntest "deleteVirtualDirectory", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "deleteVirtualDir",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd delete vdir /vdir.name:"Default Web Site/mytestvdir2"');
      
};


ntest "createVirtualDirectory", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "createVirtualDir",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd add vdir /app.name:"Default Web Site/" /path:"/mytestvdir2" /physicalPath:"c:/Inetpub/wwwroot/Sites/myvdir2"');
      
      
};

ntest "startWebSite", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "start-Site1",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd start site /site.name:"Site1"');
      
      
};

ntest "stopWebSite", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "stop-Site1",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd stop site /site.name:"Site1"');
      
      
};

ntest "assignAppToPool", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "assignAppToPool",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd set site /site.name:"Default Web Site" /[path=\'/app1\'].applicationPool:"My App Pool"');
      
      my $searchCommandLine = $xpath->findvalue("//property[propertyName='searchCmdLine']/value");
      assertEq($searchCommandLine, '%windir%\system32\inetsrv\appcmd list apppool "My App Pool"');
      
      
};

ntest "createAppPool", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "createAppPool",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd add apppool /name:"My App Pool 1"');
      
      my $searchCommandLine = $xpath->findvalue("//property[propertyName='searchCmdLine']/value");
      assertEq($searchCommandLine, '%windir%\system32\inetsrv\appcmd list apppool "My App Pool 1"');
      
};

ntest "createWebApp", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "createWebApp",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd add app /site.name:"Default Web Site" /path:"/myapp02" /physicalPath:"c:/Inetpub/wwwroot/Sites/myapp02"');
      
      
};

ntest "deploy", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "deploy",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '"xcopy" "C:\Documents and Settings\ablanco\My Documents\shared\test1\*" "c:/Inetpub/wwwroot/Sites/myvdir1" /E /K /R /H /I /Y');
      
      
};

ntest "listSitesByBinding", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "listSitesByBinding",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
      
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd list site /bindings:http/*:80:');
      
      
};

ntest "startAppPool-NameWithSpaces", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "startAppPool-NameWithSpaces",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");
      assertEq($commandLine, '%windir%\system32\inetsrv\appcmd start apppool /apppool.name:"My App Pool"');
      
      
};


ntest "stopAppPool-FakePool", {}, sub {

      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "stopAppPool-FakePool",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines   
      my $cmdLine = $xpath->findvalue("//property[propertyName='cmdLine']/value");

      assertEq($cmdLine, '%windir%\system32\inetsrv\appcmd stop apppool /apppool.name:"Fake App Pool #1@"');
      
};
